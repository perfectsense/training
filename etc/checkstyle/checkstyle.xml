<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
Brightspot Java Style Guide is our coding standards for Java source files, heavily based on the Google one at
https://google.github.io/styleguide/javaguide.html
-->

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!-- Added for toggling all checks with '// CHECKSTYLE:(ON|OFF)'. -->
    <module name="SuppressWithPlainTextCommentFilter"/>

    <!-- Added for toggling a single check with '// CHECKSTYLE:<CheckName>:(ON|OFF)'. -->
    <module name="SuppressWithPlainTextCommentFilter">
        <property name="offCommentFormat" value="// CHECKSTYLE\:([\w\|]+)\:OFF"/>
        <property name="onCommentFormat" value="// CHECKSTYLE\:([\w\|]+)\:ON"/>
        <property name="checkFormat" value="$1"/>
    </module>

    <!-- Added to ensure that lines don't end with any trailing whitespace. -->
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Line must not contain trailing whitespace."/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
    </module>

    <module name="TreeWalker">

        <!-- *********** -->
        <!-- Annotations -->
        <!-- *********** -->

        <!-- Changed to disallow same line annotations, even on fields.
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>

        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        -->
        <module name="AnnotationLocation"/>

        <!-- Added to prevent semantically equivalent annotations from being written differently. -->
        <module name="AnnotationUseStyle">
            <property name="elementStyle" value="ignore"/>
        </module>

        <!-- Added to centralize annotations on a package into a single place. -->
        <module name="PackageAnnotation"/>

        <!-- ************ -->
        <!-- Block Checks -->
        <!-- ************ -->

        <!-- Changed to always require a comment that explains the empty block.
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        -->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_WHILE, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, INSTANCE_INIT, STATIC_INIT, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_CASE, LITERAL_DEFAULT, ARRAY_INIT"/>
        </module>

        <module name="LeftCurly"/>
        <module name="NeedBraces"/>

        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>

        <!-- ************ -->
        <!-- Class Design -->
        <!-- ************ -->

        <!-- Removed for now until legacy code refactor.
        <module name="OneTopLevelClass"/>
        -->

        <!-- ****** -->
        <!-- Coding -->
        <!-- ****** -->

        <!-- Added to ensure that the `default` clause in a `switch` statement comes last. -->
        <module name="DefaultComesLast"/>

        <!-- Added to prevent empty statements i.e. standalone semicolons. -->
        <module name="EmptyStatement"/>

        <!-- Added to ensure that equals and hashCode methods are implemented together. -->
        <module name="EqualsHashCode"/>

        <module name="FallThrough"/>

        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>

        <module name="MissingSwitchDefault"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>

        <!-- Removed for now because there's too much code that violates this check.
        <module name="OverloadMethodsDeclarationOrder"/>
        -->

        <!-- Added to ensure that all classes have a package declaration. -->
        <module name="PackageDeclaration"/>

        <!-- Added to ensure that boolean expressions are written as succinctly as possible. -->
        <module name="SimplifyBooleanExpression"/>

        <!-- Added to ensure that boolean return statements are written as succinctly as possible. -->
        <module name="SimplifyBooleanReturn"/>

        <!-- ******* -->
        <!-- Imports -->
        <!-- ******* -->

        <!-- Changed to allow starred static member imports.
        <module name="AvoidStarImport"/>
        -->
        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true"/>
        </module>

        <!-- Changed because we're more used to this order.
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>
        -->
        <module name="CustomImportOrder">
            <property name="customImportOrderRules" value="STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###STATIC"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="sortImportsInGroupAlphabetically" value="true"/>
        </module>

        <!-- Added to prevent usages of sun.* classes -->
        <module name="IllegalImport"/>

        <!-- Added to detect unnecessary imports. -->
        <module name="RedundantImport"/>

        <!-- Added to detect unused imports. -->
        <module name="UnusedImports"/>

        <!-- Removed for now because there's too much code that violates this check.
        <module name="VariableDeclarationUsageDistance"/>
        -->

        <!-- **************** -->
        <!-- Javadoc Comments -->
        <!-- **************** -->

        <!-- Removed for now until Javadocs are all cleaned up.
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>

        <module name="JavadocParagraph"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="NonEmptyAtclauseDescription"/>

        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>

        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        -->

        <!-- ************* -->
        <!-- Miscellaneous -->
        <!-- ************* -->

        <module name="ArrayTypeStyle"/>

        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <module name="CommentsIndentation"/>

        <!-- Removed because this check is very buggy.
        <module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="2"/>
        </module>
        -->

        <module name="OuterTypeFilename"/>
        <module name="UpperEll"/>

        <!-- ******** -->
        <!-- Modifier -->
        <!-- ******** -->

        <module name="ModifierOrder"/>

        <!-- Added to ensure that modifiers are written as succinctly as possible.
        Removed for now because there's too much code that violates this check.
        <module name="RedundantModifier"/>
        -->

        <!-- ****************** -->
        <!-- Naming Conventions -->
        <!-- ****************** -->

        <!-- We only want to enforce proper casing in names. -->

        <!-- Removed.
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>

        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->

        <!-- Changed.
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][A-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Added to ensure that constant names are in all uppercase letters. -->
        <module name="ConstantName"/>

        <!-- Changed.
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][A-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Changed.
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="LambdaParameterName">
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Added because it seems like this should actually be there in the Google one? -->
        <module name="LocalFinalVariableName"/>

        <!-- Changed.
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="LocalVariableName">
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Changed.
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="MemberName">
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Changed.
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="MethodName">
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Changed.
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z][A-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Changed.
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        -->
        <module name="ParameterName">
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Added because it seems like this should actually be there in the Google one? -->
        <module name="StaticVariableName"/>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- *************** -->
        <!-- Size Violations -->
        <!-- *************** -->

        <!-- Changed because 100 is a bit too narrow given 4-space indentations.
        <module name="LineLength">
            <property name="max" value="100"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        -->
        <!-- Removed for now because there's too much code that violates this check.
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^package.*|^import.*|https?://"/>
        </module>
        -->

        <!-- Whitespace -->

        <!-- Added to ensure that an empty initializer in a `for` statement doesn't contain any whitespace.
        e.g. `for (; ...)` not `for ( ; ...)` -->
        <module name="EmptyForInitializerPad"/>

        <!-- Added to ensure that an empty iterator in a `for` statement is surrounded by whitespace.
        e.g. `for (int i = 0; ; )` not `for (int i = 0;;)` -->
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>

        <!-- Changed because fields without vertical spacing look too crowded when there are annotations,
        and because we want to prevent multiple blank lines in between statements.
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        -->
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF"/>
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <module name="MethodParamPad"/>
        <module name="NoLineWrap"/>

        <!-- Added to ensure that there are no whitespace after an unary operator. -->
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="AT, INC, DEC, UNARY_MINUS, UNARY_PLUS, BNOT, LNOT, DOT, ARRAY_DECLARATOR, INDEX_OP"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>

        <module name="ParenPad"/>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>

        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <!-- Added to ensure that there aren't multiple whitespace characters between tokens. -->
        <module name="SingleSpaceSeparator">
            <property name="validateComments" value="true"/>
        </module>

        <!-- Added to ensure checkstyle can be disabled using // CHECKSTYLE:OFF and // CHECKSTYLE:ON comment syntax. This is used a lot during migration -->
        <module name="SuppressionCommentFilter"/>

        <!-- Added to ensure that there isn't any whitespace within a typecast. -->
        <module name="TypecastParenPad"/>

        <!-- Added to ensure that there is whitespace after comma, semicolon, typecast, `if`, `else`, `while`, `do`, `for`, and `while`. -->
        <module name="WhitespaceAfter"/>

        <!-- Changed because we don't allow empty blocks anyway.
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        -->
        <module name="WhitespaceAround">
            <property name="ignoreEnhancedForColon" value="false"/>
        </module>
    </module>
</module>
