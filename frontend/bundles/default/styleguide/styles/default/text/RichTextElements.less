.RichTextElements {

  // underline links inside paragraphs and lists, but not in the base
  // as it underlines enhancements which we do not want underlined
  >p,
  >ul,
  >ol,
  p>ul,
  p>ol,
  h2,
  h3 {
    a {
      text-decoration: underline;

      &.Button {
        color: var(--color-button-text);

        &:hover {
          color: var(--color-button-hover-text);
          text-decoration: none;
        }
      }

      &:hover {
        text-decoration: none;
      }
    }
  }

  .LinkEnhancement a:not(.Button),
  >a {
    text-decoration: underline;

    &:hover {
      text-decoration: none;
    }
  }

  // fixing lists and lists of lists, but trying not to affect Enhancements that might
  // have list markup in them
  >ul,
  p>ul,
  td>ul {
    list-style: disc;
    margin: var(--spacing-md) 0;
    padding: 0 0 0 var(--spacing-md);

    li {
      padding: 0 0 var(--spacing-md) var(--spacing-md);
    }

    li>ul {
      list-style: circle;
      padding: var(--spacing-md) 0 0 var(--spacing-md);

      li:last-of-type {
        padding: 0 0 0 var(--spacing-md);
      }

      li>ul {
        list-style: square;
        padding: var(--spacing-md) 0 0 var(--spacing-md);

        li:last-of-type {
          padding: 0 0 0 var(--spacing-md);
        }

        li>ul {
          list-style: disc;
          padding: var(--spacing-md) 0 0 var(--spacing-md);
        }
      }
    }


    li>ol {
      list-style: decimal;
      padding: var(--spacing-md) 0 0 var(--spacing-md);
    }
  }

  >ol,
  p>ol,
  td>ol {
    list-style: decimal;
    margin: var(--spacing-md) 0;
    padding: 0 0 0 var(--spacing-md);

    li {
      padding: 0 0 var(--spacing-md) var(--spacing-md);
    }

    li>ul {
      list-style: disc;
      padding: var(--spacing-md) 0 0 var(--spacing-md);

      li:last-of-type {
        padding: 0 0 0 var(--spacing-md);
      }
    }

    li>ol {
      list-style: lower-alpha;
      padding: var(--spacing-md) 0 0 var(--spacing-md);

      li:last-of-type {
        padding: 0 0 0 var(--spacing-md);
      }

      li>ol {
        list-style: lower-roman;
        padding: var(--spacing-md) 0 0 var(--spacing-md);
      }
    }
  }

  >p {
    .verticalSpacing(var(--spacing-md));
  }

  .BlockQuote {
    .verticalSpacing(var(--spacing-xxl));
  }

  table {
    width: 100%;
    border: 1px solid var(--color-border);

    tbody {
      tr {
        margin-bottom: var(--spacing-sm);

        &:last-of-type {
          td {
            padding-bottom: 0;
          }
        }
      }

      td {
        padding: 0 var(--spacing-md);
        border: 1px solid var(--color-border);
        background-clip: padding-box;
        min-height: 50px;
        height: 50px;
        position: relative;

        &:first-child {
          border-left: 0;
        }

        &:last-child {
          border-right: 0;
        }
      }
    }
  }
}
